# -*- coding: utf-8 -*-
"""scam detection program.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v6T_fDdvyIuK5V9MqWozadYu0PWKOSaJ
"""


import json
import string
from googleapiclient.discovery import build
import pickle
import requests
import sys
import os
from flask import Flask, request
app = Flask(__name__)

f = open("./api_key.txt", "r")
api_key = f.read()
youtube = build('youtube', 'v3', developerKey=api_key)

def is_scam(comment):
    # load model and vectorizer
    svm_model = pickle.load(open("./scam_model.unknown", 'rb'))
    vectorizer = pickle.load(open("./vectorizer.unknown", 'rb'))
    
    # transform using vectorizer
    comment_transformed = vectorizer.transform([comment])
    
    # generate prediction
    pred = svm_model.predict(comment_transformed)
    return pred[0] == 1

def get_video_comments(video_id):
    # empty list to hold comment text
    comments = []
    
    # retrieve first 100 comments data
    video_response = youtube.commentThreads().list(
    part='snippet, replies',
    videoId=video_id,
    textFormat='plainText',
    maxResults=100).execute()
    
    # iterate video response
    while video_response:
        for item in video_response['items']:
            #extract comment
            comment = item['snippet']['topLevelComment']['snippet']['textDisplay']
            comments.append(comment)
            
            # working on replies
            reply_number = item['snippet']['totalReplyCount']
            if reply_number > 0:
                if 'replies' in item:
                    for reply in item['replies']['comments']:
                        comment = reply['snippet']['textDisplay']
                        comments.append(comment)
                        
        # get the next 100 comments
        if 'nextPageToken' in video_response:
            video_response = youtube.commentThreads().list(
                part='snippet, replies',
                videoId=video_id,
                textFormat='plainText',
                pageToken=video_response['nextPageToken'],
                maxResults=100).execute()
        else:
            break
    return comments

def checkurl(video_link):
  r = requests.get(video_link)
  f = "Video unavailable" in r.text
  return f

@app.route('/commspy', methods = ['POST'])
def wrk():
  vid_link = request.get_json()
  if(os.path.exists('./scam_collection.json')):
    os.remove("./scam_collection.json")

  vid_link = vid_link.rsplit("v=",1)[1]
  comm = get_video_comments(vid_link)
  scam_comm=[]
  for i in comm:
    if is_scam(i) == True:
      scam_comm.append(i)
  scam_dict={"scam":scam_comm}
  scam_collect = json.dumps(scam_dict)
  with open('scam_collection.json','w') as outfile:
    outfile.write(scam_collect)
  return scam_collect
if __name__ == "__main__": 
  app.run(port=5000)